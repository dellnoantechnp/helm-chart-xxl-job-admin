#################################################
## mysql serverId , v1.0.26+ will autoGen
{{- if .item.mysql.slaveId.autoGenerate }}
#canal.instance.mysql.slaveId=
{{- else }}
canal.instance.mysql.slaveId={{ .item.mysql.slaveId.number }}
{{- end }}
# enable gtid use true/false
canal.instance.gtidon={{ .item.gtidon }}
# position info
canal.instance.master.address={{ .item.master.address }}:{{ .item.master.port }}
canal.instance.master.journal.name={{ .item.master.journalName }}
canal.instance.master.position={{ .item.master.position }}
canal.instance.master.timestamp={{ .item.master.timestamp }}
canal.instance.master.gtid={{ .item.master.gtid }}

# rds oss binlog
canal.instance.rds.accesskey=
canal.instance.rds.secretkey=
canal.instance.rds.instanceId=

# table meta tsdb info
canal.instance.tsdb.enable={{ $.Values.TsdbDBConf.enabled }}
#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb?characterEncoding=utf-8&autoReconnect=true&rewriteBatchedStatements=true&serverTimezone=UTC
#canal.instance.tsdb.dbUsername=canal
#canal.instance.tsdb.dbPassword=canal

## Standby mysql instance
{{- if .item.standby.enabled }}
canal.instance.standby.address = {{ .item.standby.address }}
canal.instance.standby.journal.name={{ .item.standby.journalName }}
canal.instance.standby.position={{ .item.standby.position }}
canal.instance.standby.timestamp={{ .item.standby.timestamp }}
canal.instance.standby.gtid={{ .item.standby.gtid }}
{{- end }}

{{- if .item.standby.enabled }}
{{ include "canal.instance.enable.detection" . }}
{{- end }}


# username/password
canal.instance.dbUsername={{ .item.dbUsername }}
canal.instance.dbPassword={{ .item.dbPassword }}
canal.instance.connectionCharset=UTF-8

# enable druid Decrypt database password
canal.instance.enableDruid=false
#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==

# table regex
canal.instance.filter.regex={{ .item.filter.regex | quote }}

# table black regex
canal.instance.filter.black.regex={{ .item.filter.black.regex | quote }}

# table field filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)
#canal.instance.filter.field=test1.t_product:id/subject/keywords,test2.t_company:id/name/contact/ch

# table field black filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)
#canal.instance.filter.black.field=test1.t_product:subject/product_image,test2.t_company:id/name/contact/ch

# mq config
canal.mq.topic={{ .item.name }}

# dynamic topic route by schema or table regex
#canal.mq.dynamicTopic=mytest1.user,topic2:mytest2\\..*,.*\\..*
canal.mq.partition=0

# hash partition config
#canal.mq.enableDynamicQueuePartition=false
#canal.mq.partitionsNum=3
#canal.mq.dynamicTopicPartitionNum=test.*:4,mycanal:6
#canal.mq.partitionHash=test.table:id^name,.*\\..*
#################################################