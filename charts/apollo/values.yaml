#
# Copyright 2021 Apollo Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
db:
  configdb:
    name: apollo-configdb
    # apolloconfigdb host
    host: "x.x.x.x"
    port: 3306
    dbName: ApolloConfigDB
    # apolloconfigdb user name
    userName: ""
    # apolloconfigdb password
    password: ""
    connectionStringProperties: characterEncoding=utf8&useSSL=false

    ## @param service: create a externalName service for foreign database endpoint
    ##
    service:
      # whether to create a Service for this host or not
      enabled: false
      fullNameOverride: ""
      port: 3306
      type: ClusterIP

    ## @param autoInitDatabase: auto init base table schema.
    ##
    autoInitDatabase:
      enabled: false
      initContainer:
        registry: "docker.io"
        repository: mysql
        tag: latest

  portaldb:
    name: apollo-portaldb
    # apolloportaldb host
    host: "x.x.x.x"
    port: 3306
    dbName: ApolloPortalDB
    # apolloportaldb user name
    userName: ""
    # apolloportaldb password
    password: ""
    connectionStringProperties: characterEncoding=utf8&useSSL=false

    ## @param service: create a externalName service for foreign database endpoint
    ##
    service:
      # whether to create a Service for this host or not
      enabled: false
      fullNameOverride: ""
      port: 3306
      type: ClusterIP

    ## @param autoInitDatabase: auto init base table schema.
    ##
    autoInitDatabase:
      enabled: false
      initContainer:
        registry: "docker.io"
        repository: mysql
        tag: latest

configService:
  name: apollo-configservice
  fullNameOverride: ""
  replicaCount: 2
  containerPort: 8080
  image:
    repository: apolloconfig/apollo-configservice
    tag: ""
    pullPolicy: IfNotPresent
  imagePullSecrets: []
  service:
    fullNameOverride: ""
    port: 8080
    ## @param nodePort: when type is NodePort or LoadBalancer, use this to assign a port number.
    ## Normal port range in 30000-32767.
    nodePort: ""
    targetPort: 8080
    ## @param type for Service type, choice one in ClusterIP, NodePort, LoadBalancer.
    ##
    type: ClusterIP

    ## @param loadBalancerIP externalTrafficPolicy: only on service type is LoadBalancer
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster

  ingress:
    ingressClassName: null
    enabled: false
    annotations: { }
    hosts:
      - host: ""
        paths: [ ]
    tls: [ ]
  liveness:
    initialDelaySeconds: 100
    periodSeconds: 10
  readiness:
    initialDelaySeconds: 30
    periodSeconds: 5
  config:
    # spring profiles to activate
    profiles: "github,kubernetes"
    # override apollo.config-service.url: config service url to be accessed by apollo-client 
    configServiceUrlOverride: ""
    # override apollo.admin-service.url: admin service url to be accessed by apollo-portal 
    adminServiceUrlOverride: ""
    # specify the context path, e.g. /apollo
    contextPath: ""
  # environment variables passed to the container, e.g. JAVA_OPTS
  env: {}
  strategy: {}
  resources:
    requests:
      cpu: 200m
      memory: 1Gi
    limits:
      cpu: 2
      memory: 2Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}

adminService:
  name: apollo-adminservice
  fullNameOverride: ""
  replicaCount: 2
  containerPort: 8090
  image:
    repository: apolloconfig/apollo-adminservice
    tag: ""
    pullPolicy: IfNotPresent
  imagePullSecrets: []

  service:
    fullNameOverride: ""
    port: 8090
    ## @param nodePort: when type is NodePort or LoadBalancer, use this to assign a port number.
    ## Normal port range in 30000-32767.
    nodePort: ""

    ## @param type for Service type, choice one in ClusterIP, NodePort, LoadBalancer.
    ##
    type: ClusterIP

    ## @param loadBalancerIP externalTrafficPolicy: only on service type is LoadBalancer
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster

  ingress:
    enabled: false
    ingressClassName: null
    annotations: { }
    hosts:
      - host: ""
        paths: [ ]
    tls: [ ]
  liveness:
    initialDelaySeconds: 100
    periodSeconds: 10
  readiness:
    initialDelaySeconds: 30
    periodSeconds: 5
  config:
    # spring profiles to activate
    profiles: "github,kubernetes"
    # specify the context path, e.g. /apollo
    contextPath: ""
  # environment variables passed to the container, e.g. JAVA_OPTS
  env: {}
  strategy: {}
  resources:
    requests:
      cpu: 200m
      memory: 1Gi
    limits:
      cpu: 2
      memory: 2Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}

portal:
  ## @param enabled: boolean value for install portal web-ui.
  ##
  enabled: false

  name: apollo-portal
  fullNameOverride: ""
  replicaCount: 1
  containerPort: 8070
  image:
    repository: apolloconfig/apollo-portal
    tag: ""
    pullPolicy: IfNotPresent
  imagePullSecrets: [ ]
  service:
    fullNameOverride: ""
    port: 8070
    targetPort: 8070
    type: ClusterIP
    sessionAffinity: ClientIP
  ingress:
    ingressClassName: null
    enabled: false
    annotations: { }
    hosts:
      - host: ""
        paths: [ ]
    tls: [ ]
  liveness:
    initialDelaySeconds: 100
    periodSeconds: 10
  readiness:
    initialDelaySeconds: 30
    periodSeconds: 5
  # environment variables passed to the container, e.g. JAVA_OPTS
  env: { }
  strategy: { }
  resources: { }
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }
  annotations: { }

  config:
    ## @param profiles: spring profiles to activate
    ##
    profiles: "github,auth"

    ## @param envs: specify the env names, e.g. dev,pro
    ##
    envs: "dev"

    ## @param metaServers: specify the meta servers, e.g.
    ## dev: http://apollo-configservice-dev:8080
    ## pro: http://apollo-configservice-pro:8080
    metaServers: { }

    ## @param contextPath: specify the context path, e.g. /apollo
    ##
    contextPath: ""

    ## @param files: extra config files for apollo-portal, e.g. application-ldap.yml
    ##
    files: { }