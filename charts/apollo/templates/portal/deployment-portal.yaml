{{- if .Values.portal.enabled }}
#
# Copyright 2021 Apollo Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: apps/v1
kind: Deployment
metadata:
  {{- $portalFullName := include "apollo.portal.fullName" . }}
  name: {{ $portalFullName }}
  labels:
    app.kubernetes.io/component: apollo-portal
    {{- include "apollo.portal.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.portal.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/component: apollo-portal
      app: {{ $portalFullName }}
  {{- with .Values.portal.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: apollo-portal
        app: {{ $portalFullName }}
        {{- include "apollo.portal.labels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/portal/configmap-portal.yaml") . | sha256sum }}
      {{- with .Values.portal.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.portal.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: configmap-{{ $portalFullName }}
          configMap:
            name: {{ $portalFullName }}
            items:
              - key: application-github.properties
                path: application-github.properties
              - key: apollo-env.properties
                path: apollo-env.properties
            {{- range $fileName, $content := .Values.portal.config.files }}
              - key: {{ $fileName }}
                path: {{ $fileName }}
            {{- end }}
            {{- if .Values.db.portaldb.autoInitDatabase.enabled }}
              - key: init-database.sql
                path: init-database.sql
            {{- end }}
            defaultMode: 420
      {{- if .Values.db.portaldb.autoInitDatabase.enabled }}
      initContainers:
        - name: init-database
          image: "{{ .Values.db.portaldb.autoInitDatabase.initContainer.registry }}/{{ .Values.db.portaldb.autoInitDatabase.initContainer.repository }}:{{ .Values.db.portaldb.autoInitDatabase.initContainer.tag }}"
          env:
            - name: MYSQL_HOST
              value: {{ .Values.db.portaldb.host }}
          command:
            - bash
            - "-ec"
          args:
            - |
              echo "INFO: Start to init database."
              cat > /tmp/.my.cnf << EOF
              [client]
              host={{ .Values.db.portaldb.host }}
              user={{ .Values.db.portaldb.userName | quote }}
              password={{ .Values.db.portaldb.password | quote }}
              database={{ .Values.db.portaldb.dbName }}
              EOF
              echo "INFO: Checking the database, if it's exist ..."
              if mysql --defaults-file=/tmp/.my.cnf --connect-timeout=30 -w -e 'SHOW TABLES FROM {{ .Values.db.portaldb.dbName }}'; then
                if mysql --defaults-file=/tmp/.my.cnf -E --connect-timeout=30 -w -e 'SHOW TABLES FROM {{ .Values.db.portaldb.dbName }}' | grep -q : ; then
                  echo "INFO: {{ .Values.db.portaldb.dbName }} was exists. skipping to initial SQL table."
                else
                  echo "INFO: {{ .Values.db.portaldb.dbName }} is not exists. creating and init SQL file ..."
                  echo "INFO: Creating TABLES ..."
                  mysql --defaults-file=/tmp/.my.cnf -E --connect-timeout=30 -w {{ .Values.db.portaldb.dbName }} < /docker-entrypoint-initdb.d/init-database.sql
                fi
              else
                echo "ERROR: Connect database failed ..."
                exit 1
              fi
              echo "INFO: starting app container ..."
              rm -f /tmp/.my.cnf
          volumeMounts:
            - name: configmap-{{ $portalFullName }}
              mountPath: /tmp/application-github.properties
              subPath: application-github.properties
            - name: configmap-{{ $portalFullName }}
              mountPath: /docker-entrypoint-initdb.d/init-database.sql
              subPath: init-database.sql
      {{- end }}
      containers:
        - name: {{ .Values.portal.name }}
          image: "{{ .Values.portal.image.repository }}:{{ .Values.portal.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.portal.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.portal.containerPort }}
              protocol: TCP
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.portal.config.profiles | quote }}
          {{- range $key, $value := .Values.portal.env }}
            - name: {{ $key }}
              value: {{ $value }}
          {{- end }}
          volumeMounts:
            - name: configmap-{{ $portalFullName }}
              mountPath: /apollo-portal/config/application-github.properties
              subPath: application-github.properties
            - name: configmap-{{ $portalFullName }}
              mountPath: /apollo-portal/config/apollo-env.properties
              subPath: apollo-env.properties
          {{- range $fileName, $content := .Values.portal.config.files }}
            - name: configmap-{{ $portalFullName }}
              mountPath: /apollo-portal/config/{{ $fileName }}
              subPath: {{ $fileName }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: {{ .Values.portal.config.contextPath }}/health
              port: {{ .Values.portal.containerPort }}
            initialDelaySeconds: {{ .Values.portal.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.portal.liveness.periodSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.portal.config.contextPath }}/health
              port: {{ .Values.portal.containerPort }}
            initialDelaySeconds: {{ .Values.portal.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.portal.readiness.periodSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
    {{- with .Values.portal.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.portal.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.portal.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{- end }}